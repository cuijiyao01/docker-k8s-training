#########################################################
## adapt the cluster and project name before deploying ##
#########################################################
# 
# specify a deployment first - this will be the backend all traffic is routed to.
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: simple-nginx
  labels:
    tier: application
spec:
  replicas: 1
  selector:
    matchLabels:
      app: simple-nginx
  template:
    metadata:
      labels:
        app: simple-nginx
    spec:
      volumes:
      - name: index-html
        emptyDir: {}
      initContainers:
      - name: setup
        image: alpine:3.8
        command:
        - /bin/sh
        - -c
        - echo This is a simple nginx! > /work-dir/index.html
        volumeMounts:
        - name: index-html
          mountPath: "/work-dir"
      containers:
      - name: nginx
        image: nginx:mainline
        ports:
        - containerPort: 80
        volumeMounts:
        - name: index-html
          mountPath: /usr/share/nginx/html
---
# next, a service is required to handle traffic to the pods created by the deployment
apiVersion: v1
kind: Service
metadata:
  name: simple-nginx-service
  labels:
    tier: networking
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: simple-nginx
  type: ClusterIP
---
# finally, define the ingress
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: simple-nginx-ingress
  # annotations are part of the metadata object
  # usually annotations are used to sent information to a controller
  # here we instruct the ingress-controller to set the connect-timeout to 61s and rewrite the target to '/' for this specific host/URL
  annotations:
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "61"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
# define the routing rules for the ingress in its 'spec'
spec:
  rules:
    # an ingress can have one to many hosts. A host is fully qualified URL
    # TODO: replace in ingress host URL the <participantId>, <cluster-name> and <project-name> parameters of the training cluster 
    # e.g. '0007-simple-nginx.ingress.wdfcw48.k8s-train.shoot.canary.k8s-hana.ondemand.com'
  - host: <participantId>-simple-nginx.ingress.<cluster-name>.<project-name>.shoot.canary.k8s-hana.ondemand.com
    http:
      paths:
      # the ingress controller routes traffic to a service backend based on a <host>/<path> combination
      # in this case traffic coming in to <host>/my-app will be routed to the service 'simple-nginx-service'
      - path: /my-app(.*)
        backend:
          serviceName: simple-nginx-service
          servicePort: 80
